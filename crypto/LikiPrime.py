#!/usr/bin/env python3

import random
from libnum import s2n
from secret import secrets, flag


def get_prime(secret):
    prime = 1
    for _ in range(secret):
        prime = prime << 1
    return prime - 1


random.shuffle(secrets)

m = s2n(flag)
p = get_prime(secrets[0])
q = get_prime(secrets[1])
n = p * q
e = 0x10001
c = pow(m, e, n)

print("n = {}.format(n)")
print("e = {}.format(e)")
print("c = {}.format(c)")
# n = 1985802317259235034705609293428910886733255982001441242290487339101736839049120444140501930175769216335856872077222299095672595685118574899319424750934128294459949486905218713653831822803015849881969045340112743536190133608542607850478468194336453171106517497598371642049502874638460684578537293930108973000592656646374710343205904467187224295549798152351393467696643596507154624380622975753516663723048872973072848538565821305670592597513101418863690276693343208901568233338926743109129288448711537220503949038280393740142195541198294705998033170971755452557877813475303439124552169041974775753527544793087822593926615694028305251928817649475728598485279014576989698809853856822926955473936557955733892903017446536763378024276276280411088904383053079447889003511814407259390318096141373236499392054646594961794496905428211169944662869418530617044490323169369409786367905712981384646296747313099678740233412868758086538914166533955831927161517706423454039036823887545689110094549963513557399253975895330365717201638653561054790575791207989197218958251835572265949893930833953166066810781566230900065432600857634847127785218469260376900241815290894696153538251823759371990573839084965121047674268551184525629099456990599755823174793770464592204176795399209475556664719677309720341085271686461571061691695910077311305241285010449207609112438617752890314930681994083290395302438356367832203886057572513549083639125253680740790434679965904291831349005810827709121084358160934578421172741190563991703581546057918725087258590252061716890739215376319843733036863860234815489703040791342763967226693608918356968171312022849009580414162859962840895716282129585065590538633217
# e = 65537
# c = 465601548848097650837079348249517374929105209618472486422475765354159336066003549435073452134188739715351536787583790920465763909141571417675997413788568880023228248694616730058849131422571511068757467328381128671815269393801306763810002872198358658533134011433697439796862063093540100394467382503613604362748767802216827965404826334884778903723628911807042387336187608227988504872764337587263873807152743024979255070907996503803706699255177669431725392181268940343685359742244522923951613479481066295950498112104863516608524065020004629377661372018048248249705774336439125205846354760298489647991023830583263983812074688922390975163539814194404174178115871817815254228074869555278646326098972035868772837626576512381951004570217257452849348980091020007326159955879555685289703277230090202281224601104368651833218604691348821247681133769326124883979953518436218647737207712342367618106761289140137317674021991760291418591927219748093110806373001550973795171745852286394016027869438295023200416398466471040147096266751621225704334832764072696752613599200934908344607274759056286729091669938581636889048867760162544757299775608100766740614622553250507948366423296779849815748357319425218319754936735807346821461674139470016195042178652191827330314152148750264818265057795354951947947005835482920373309934571508152160340310487687129374261635159765792937939078355381266852011438984440732904022478829205311997899723988297491150098642171488712288078705094044337791449714739997784941399506095232014149293949400021123820666186609115367126144613809415849657213994941245693314607568318693227170204695876109140496471793956932344529299026352270895044981011330302497467536107987
